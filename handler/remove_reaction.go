package handler

import (
	"encoding/json"
	"net/http"
	"github.com/gorilla/mux"
	"chat-service/storage"
)

// RemoveReactionRequest –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ–∞–∫—Ü–∏–∏
type RemoveReactionRequest struct {
	Reaction string `json:"reaction"` // –†–µ–∞–∫—Ü–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "üëç", "‚ù§Ô∏è", "üòÇ")
}

// RemoveReactionHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏–∏ —Å —Å–æ–æ–±—â–µ–Ω–∏—è
func RemoveReactionHandler(w http.ResponseWriter, r *http.Request, storage storage.Storage) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–∞
	if r.Method != http.MethodDelete {
		http.Error(w, "–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è", http.StatusMethodNotAllowed)
		return
	}

	// –ò–∑–≤–ª–µ–∫–∞–µ–º messageID –∏–∑ URL
	vars := mux.Vars(r)
	messageID, exists := vars["messageID"]
	if !exists {
		http.Error(w, "–ù–µ —É–∫–∞–∑–∞–Ω messageID", http.StatusBadRequest)
		return
	}

	// –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
	var req RemoveReactionRequest
	if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
		http.Error(w, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å", http.StatusBadRequest)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ reaction –ø–µ—Ä–µ–¥–∞–Ω
	if req.Reaction == "" {
		http.Error(w, "–ù–µ —É–∫–∞–∑–∞–Ω–∞ —Ä–µ–∞–∫—Ü–∏—è", http.StatusBadRequest)
		return
	}

	// –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ–∞–∫—Ü–∏–∏
	err := storage.RemoveReaction(r.Context(), messageID, req.Reaction)
	if err != nil {
		http.Error(w, "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é: "+err.Error(), http.StatusInternalServerError)
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
	w.WriteHeader(http.StatusOK)
	w.Write([]byte(`{"message": "–†–µ–∞–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞"}`))
}